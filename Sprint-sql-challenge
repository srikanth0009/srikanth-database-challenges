1. creating tables

CREATE TABLE organization (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50)
);

CREATE TABLE channel (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    organization_id INT,
    FOREIGN KEY (organization_id) REFERENCES organization(id)
);

CREATE TABLE user (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50)
);

CREATE TABLE user_channel (
    user_id INT,
    channel_id INT,
    PRIMARY KEY (user_id, channel_id),
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (channel_id) REFERENCES channel(id)
);

CREATE TABLE message (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    channel_id INT,
    post_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    content VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (channel_id) REFERENCES channel(id)
);


2.INSERT DATA

INSERT INTO organization (name) VALUES ('Lambda School');

INSERT INTO channel (name,organization_id) VALUES ('#general', 1),
 ('#random', 1);

INSERT INTO user (name) VALUES ('Alice'),
('Bob'),
('Chris');

INSERT INTO user_channel VALUES (1, 1),
 (1, 2),
 (2, 1),
 (3, 2);

INSERT INTO message (user_id,channel_id,content) VALUES (1, 1, 'Hello, this is Alice in #general.'),
(2, 1, 'Bob here in #general.'),
(3, 2, 'Chris is posting in #random.'),
(1, 2, 'Alice again in #random.'),
(2, 1, 'Another message from Bob in #general.'),
(1, 1, 'Alice posts again in #general.'),
(3, 2, 'Chris posts again in #random.'),
(2, 2, 'Bob posts in #random.'),
(3, 1, 'Chris in #general!'),
(1, 2, 'Alice posts a final message in #random.');


3. SELECT QUERIES

//List all organization names.

SELECT name FROM organization;

//List all channel names.

SELECT name FROM channel;

//List all channels in a specific organization by organization name.

SELECT channel.name
FROM channel
JOIN organization ON channel.organization_id = organization.id
WHERE organization.name = 'Lambda School';

//List all messages in a specific channel by channel name #general in order of post_time, descending. (Hint: ORDER BY. Because your INSERTs might have all taken place at the exact same time, this might not return meaningful results. But humor us with the ORDER BY anyway.)


SELECT m.content, m.post_time, u.name AS user_name
FROM message m
JOIN channel c ON m.channel_id = c.id
JOIN user u ON m.user_id = u.id
WHERE c.name = '#general'
ORDER BY m.post_time DESC;


//List all channels to which user Alice belongs.


SELECT c.name
FROM channel c
JOIN user_channel uc ON c.id = uc.channel_id
JOIN user u ON uc.user_id = u.id
WHERE u.name = 'Alice';

//List all users that belong to channel #general.

SELECT u.name
FROM user u
JOIN user_channel uc ON u.id = uc.user_id
JOIN channel c ON uc.channel_id = c.id
WHERE c.name = '#general';

//List all messages in all channels by user Alice.


SELECT m.content, m.post_time, c.name AS channel_name
FROM message m
JOIN user u ON m.user_id = u.id
JOIN channel c ON m.channel_id = c.id
WHERE u.name = 'Alice';

//List all messages in #random by user Bob.


SELECT m.content, m.post_time
FROM message m
JOIN user u ON m.user_id = u.id
JOIN channel c ON m.channel_id = c.id
WHERE u.name = 'Bob' AND c.name = '#random';

//List the count of messages across all channels per user. (Hint: COUNT, GROUP BY.)

SELECT u.name AS "User Name", COUNT(m.id) AS "Message Count"
FROM message m
JOIN user u ON m.user_id = u.id
GROUP BY u.name
ORDER BY u.name DESC;

//List the count of messages per user per channel.

SELECT u.name AS "User", c.name AS "Channel", COUNT(m.id) AS "Message Count"
FROM message m
JOIN user u ON m.user_id = u.id
JOIN channel c ON m.channel_id = c.id
GROUP BY u.name, c.name
ORDER BY u.name DESC, c.name;


What SQL keywords or concept would you use if you wanted to automatically delete all messages by a user if that user were deleted from the user table?

If the user deleted automatically that related data will be deleted.



